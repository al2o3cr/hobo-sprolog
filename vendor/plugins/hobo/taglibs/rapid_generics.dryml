<def tag="creation-details">
  <div class="creation-details">
    <if:get_creator><view class="creator" param="by"/></if:>
    <view:created_at class="created-at" if="&this.respond_to?(:created_at)" param="at"/>
  </div>
</def>

<def tag="primary-content">
  <view class="primary-content" field="&this.class.primary_content_attribute" if="&this.class.primary_content_attribute" merge/>
</def>

<def tag="association-count">
  <a class="association-count #{this_field.to_s.underscore}" href="##{this_field.to_s.underscore}" merge>
    <count/>
  </a>
</def>

<def tag="base-card">
  <if test="&can_view?">
    <set has-heading="&this.class.name_attribute || all_parameters[:heading]"/>
    <set has-link="&has_heading && linkable?"/>
    <div class="card #{has_link ? 'linkable' : 'content'} #{'with-owner' if this.class.creator_attribute} #{type_name :dasherize => true}" 
         merge-attrs>
      <a action="edit" class="edit" if="&!has_link && linkable?(:edit)" param="edit-link">Edit</a>
      <delete-button label="X" unless="&linkable?(:edit)" param/>

      <h3 param="heading" if="&has_heading"><a><name/></a></h3>
      <div class="content" param="content" unless="&has_link">
        <primary-content/>
      </div>
      <creation-details param/>
      <do param="counter">
        <set primary-collection="&primary_collection_name"/>
        <if test="&primary_collection">
          <span class="dependents"><count field="&primary_collection"/></span>
        </if>
      </do>
    </div>
  </if>
</def>

<def tag="card">
  <if test="&can_view?">
    <%= poly = call_polymorphic_tag('card', attributes, parameters) %>
    <base-card unless="&poly" merge/>
  </if>
</def>

<def tag="search-card">
  <%= poly = call_polymorphic_tag('search-card', attributes, parameters) %>
  <card unless="&poly"/>
</def>

<def tag="collection">
  <set-scoped collection-contains-delete-button="&false">
    <%= poly = call_polymorphic_tag('collection', attributes, parameters) %>
    <base-collection if="&poly.nil?" merge/>
    <p class="empty-collection-message" 
       if="&this.empty? || scope.collection_contains_delete_button" 
       style="#{'display:none' if !this.empty?}"
       param="empty-message">
      There are no <name-for-collection lowercase/>
    </p>
  </set-scoped>
</def>


<def tag="base-collection" attrs="sortable, sortable-options"><% 
  sortable = (sortable != false and
              first = this.first and
              first.respond_to?(:position_column) and
              reorder_url = object_url(this.member_class, :reorder, :method => :post) and
              can_edit?(first, first.position_column))
  if sortable
    singular_name = first.class.name.underscore
    attributes[:id] ||= "#{singular_name}_ordering"
  end
  %>
  <ul class="collection #{this.origin_attribute.to_s.gsub('_', '-')}" merge-attrs>
    <li: id="&%(#{singular_name}_#{this.id}) if sortable" param>
      <div class="ordering-handle" param="handle" if="&sortable">&uarr;<br/>&darr;</div>
      <card param/>
    </li:>
  </ul>
  <%= if sortable && Hobo::Dryml.last_if
        opts = { :url => reorder_url,
                 :constraint => :vertical,
                 :overlap => :vertical,
                 :scroll => :window,
                 :handle => 'ordering-handle',
                 :complete => [visual_effect(:highlight, attributes[:id])]
                } 
        opts.reverse_merge!(sortable_options) if sortable_options
        sortable_element attributes[:id], opts
      end
   %>
</def>


<def tag="collection-preview" attrs="limit, if-any">
  <% limit ||= 6 %>
  <do with="&this.is_a?(Class) ? this.limit(limit).all : this.limit(limit)">
    <unless test="&if_any && this.empty?">
      <set collection-name="&(this.try.origin_attribute || this.member_class.name.pluralize).to_s"/>
      <div class="collection-preview" merge-attrs>
        <h2>
          <do param="heading"><collection-name.titleize/></do> 
          <span param="show-all-link" if="&linkable? && this.count > limit">(<a>show all</a>)</span>
        </h2>
        <collection merge-params>
          <card: class="small"/>
        </collection>
      </div>
    </unless>
  </do>
</def>

